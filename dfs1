#include <bits/stdc++.h>
using namespace std;

// Рекурсивна функція для обходу графа в глибину (DFS)
void dfsRec(vector<vector<int>> &adj, vector<bool> &visited, int s, vector<int> &res)
{
    visited[s] = true;
    res.push_back(s);

    // Рекурсивно відвідуємо всі суміжні вершини,
    // які ще не були відвідані
    for (int i : adj[s])
        if (visited[i] == false)
            dfsRec(adj, visited, i, res);
}

// Основна функція DFS, яка ініціалізує масив visited
// і викликає dfsRec
vector<int> DFS(vector<vector<int>> &adj)
{
    vector<bool> visited(adj.size(), false);
    vector<int> res;
    dfsRec(adj, visited, 0, res);
    return res;
}

// Додає ребро в неорієнтований граф
void addEdge(vector<vector<int>> &adj, int s, int t)
{
    adj[s].push_back(t);
    adj[t].push_back(s);
}

int main()
{
    int V = 5;
    vector<vector<int>> adj(V);

    // Додаємо ребра
    vector<vector<int>> edges = {{1, 2}, {1, 0}, {2, 0}, {2, 3}, {2, 4}};
    for (auto &e : edges)
        addEdge(adj, e[0], e[1]);

    // Початкова вершина для DFS
    vector<int> res = DFS(adj); // Виконуємо DFS, починаючи з вершини 0

    for (int i = 0; i < V; i++)
        cout << res[i] << " ";
}
